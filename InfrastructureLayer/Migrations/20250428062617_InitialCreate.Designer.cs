// <auto-generated />
using System;
using InfrastructureLayer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InfrastructureLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250428062617_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.Admin.AdminModel", b =>
                {
                    b.Property<Guid>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AdminId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DomainLayer.Models.Contractor.ContractorModel", b =>
                {
                    b.Property<Guid>("ContractorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContractorId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("DomainLayer.Models.Department.DepartmentModel", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DomainLayer.Models.Employee.EmployeeModel", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasicDailyRate")
                        .HasColumnType("money");

                    b.Property<decimal>("BasicMonthlyRate")
                        .HasColumnType("money");

                    b.Property<TimeOnly>("BreakTimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("BreakTimeStart")
                        .HasColumnType("time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("WorkShiftEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("WorkShiftStart")
                        .HasColumnType("time");

                    b.HasKey("EmployeeId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeAccountInfo.EmployeeAccountInfoModel", b =>
                {
                    b.Property<Guid>("EmployeeAccountInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BankingDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<byte>("CivilStatus")
                        .HasColumnType("tinyint");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateOnly>("DateHired")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("HomeAddress")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("MailingAddress")
                        .IsRequired()
                        .HasMaxLength(140)
                        .HasColumnType("nvarchar(140)");

                    b.Property<string>("PagIbigIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhilHealthIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PhoneNumberAlt")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("SSSIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxIdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeAccountInfoId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("EmployeeAccountInfoModel");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeAttendance.EmployeeAttendanceModel", b =>
                {
                    b.Property<Guid>("EmployeeAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("BreakIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("BreakOut")
                        .HasColumnType("time");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("HolidayStatus")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsNight")
                        .HasColumnType("boolean");

                    b.Property<short>("LateMinutes")
                        .HasColumnType("smallint");

                    b.Property<short>("OTHours")
                        .HasColumnType("smallint");

                    b.Property<short>("PayableHours")
                        .HasColumnType("smallint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<TimeOnly>("TimeIn")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeOut")
                        .HasColumnType("time");

                    b.Property<short>("UTHours")
                        .HasColumnType("smallint");

                    b.HasKey("EmployeeAttendanceId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAttendanceModel");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeLeave.EmployeeLeaveModel", b =>
                {
                    b.Property<Guid>("EmployeeLeaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfAbsenceEnd")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfAbsenceStart")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DateOfFiling")
                        .HasColumnType("date");

                    b.Property<short>("Duration")
                        .HasColumnType("smallint");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("EmployeeLeaveId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeLeaveModel");
                });

            modelBuilder.Entity("DomainLayer.Models.Holiday.HolidayModel", b =>
                {
                    b.Property<int>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HolidayId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.HasKey("HolidayId");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("DomainLayer.Models.Role.RoleModel", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DomainLayer.Models.User.UserModel", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("binary(32)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("binary(32)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DomainLayer.Models.Admin.AdminModel", b =>
                {
                    b.HasOne("DomainLayer.Models.User.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("DomainLayer.Models.Admin.AdminModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Models.Contractor.ContractorModel", b =>
                {
                    b.HasOne("DomainLayer.Models.User.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("DomainLayer.Models.Contractor.ContractorModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Models.Employee.EmployeeModel", b =>
                {
                    b.HasOne("DomainLayer.Models.User.UserModel", "User")
                        .WithOne()
                        .HasForeignKey("DomainLayer.Models.Employee.EmployeeModel", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeAccountInfo.EmployeeAccountInfoModel", b =>
                {
                    b.HasOne("DomainLayer.Models.Employee.EmployeeModel", "Employee")
                        .WithOne("EmployeeAccountInfo")
                        .HasForeignKey("DomainLayer.Models.EmployeeAccountInfo.EmployeeAccountInfoModel", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeAttendance.EmployeeAttendanceModel", b =>
                {
                    b.HasOne("DomainLayer.Models.Employee.EmployeeModel", "Employee")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DomainLayer.Models.EmployeeLeave.EmployeeLeaveModel", b =>
                {
                    b.HasOne("DomainLayer.Models.Employee.EmployeeModel", "Employee")
                        .WithMany("EmployeeLeaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DomainLayer.Models.User.UserModel", b =>
                {
                    b.HasOne("DomainLayer.Models.Department.DepartmentModel", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DomainLayer.Models.Role.RoleModel", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DomainLayer.Models.Department.DepartmentModel", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DomainLayer.Models.Employee.EmployeeModel", b =>
                {
                    b.Navigation("EmployeeAccountInfo");

                    b.Navigation("EmployeeAttendances");

                    b.Navigation("EmployeeLeaves");
                });

            modelBuilder.Entity("DomainLayer.Models.Role.RoleModel", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
